package com.example.myapplication.user_interface.pendingtask;

import android.app.ProgressDialog;
import android.os.Bundle;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.DividerItemDecoration;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.RetryPolicy;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.example.myapplication.R;
import com.example.myapplication.helper.SharedPrefManager;
import com.example.myapplication.user_interface.dashboard.model.ChartDataItem;
import com.example.myapplication.util.Constant;
import com.example.myapplication.util.DialogUtil;
import com.example.myapplication.util.NetworkUtil;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 */
public class PendingTaskFragment extends Fragment {

    private static final String TAG = PendingTaskFragment.class.getName();
    //Widgets
    private LinearLayout llNoItemsView;
    private TextView txtTaskCount;
    private EditText etSearch;
    private ProgressDialog mWaiting;
    private SharedPrefManager mPrefManager;

    //RecyclerView
    private RecyclerView recyclerView;
    private PendingTaskAdapter mAdapter;
    private List<Task> pendingTaskList;

    public PendingTaskFragment() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_pending_task, container, false);
        initViews(root);

        BottomNavigationView bottomNavigationView= getActivity().findViewById(R.id.bottom_navigation);
        bottomNavigationView.getMenu().findItem(R.id.b_nav_pending_task).setChecked(true);

        if (NetworkUtil.isNetworkOnline(getActivity())) {
            callGetChartIdsAPI();
        } else {
            DialogUtil.showAlertDialog(getActivity(), getResources().getString(R.string.no_internet_title),
                    getResources().getString(R.string.no_internet_message), false, false);
        }
        return root;
    }

    private void initViews(View root) {
        mPrefManager = new SharedPrefManager(getActivity());
        setTitle();
        initText(root);
        setSearchEditText(root);
        setRecyclerView(root);
    }
    private void setTitle(){
        getActivity().setTitle(getResources().getString(R.string.pending_task));
    }

    @Override
    public void onStart() {
        super.onStart();
        callPendingTasksAPI();
    }

    private void initText(View root) {
        txtTaskCount = root.findViewById(R.id.txt_task_count);
        llNoItemsView = root.findViewById(R.id.no_items_view);
    }

    private void setSearchEditText(View root) {
        etSearch = root.findViewById(R.id.et_search);
        etSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if(mAdapter != null){
                    mAdapter.getFilter().filter(s);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

    }

    private void setRecyclerView(View root) {

        recyclerView = root.findViewById(R.id.recyclerview);
        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(),
                RecyclerView.VERTICAL, false));
        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),
                DividerItemDecoration.VERTICAL));
    }

    private void callGetChartIdsAPI(){
        String url = String.format(Constant.URL_CHART_ID,mPrefManager.getClientServerUrl(),mPrefManager.getCloudCode(),mPrefManager.getAuthToken());
        RequestQueue queue = Volley.newRequestQueue(getActivity());
        Log.d("chart ids api url", url);
        StringRequest request = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            JSONArray jsonArray = new JSONArray(response);
                            for (int i = 0; i < jsonArray.length(); i++) {
                                JSONObject jsonObject = jsonArray.getJSONObject(i);
                                Iterator<String> iterator = jsonObject.keys();
                                while (iterator.hasNext()) {
                                    String key = iterator.next();
                                    mPrefManager.putString(key, jsonObject.optString(key));
                                }
                            }

                        } catch (Exception e) {
                            callAdapter();
                            e.printStackTrace();
                            hideProgressDialog();
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                callAdapter();
                hideProgressDialog();
            }
        });
        queue.add(request);

    }

    private void callAdapter() {
        if (pendingTaskList == null) {
            llNoItemsView.setVisibility(View.VISIBLE);
        } else {
            llNoItemsView.setVisibility(View.GONE);
            mAdapter = new PendingTaskAdapter(getActivity(), pendingTaskList);
            recyclerView.setAdapter(mAdapter);
        }
    }

    private void setTaskCount(String count) {
        txtTaskCount.setText(count);
    }

    private void callPendingTasksAPI() {
        if (NetworkUtil.isNetworkOnline(getActivity())) {
            pendingTasksAPI();
        } else {
            DialogUtil.showAlertDialog(getActivity(), "No Internet Connection!",
                    "Please check your internet connection and try again", false, false);
        }
    }

    private void pendingTasksAPI() {
       showProgressDialog();
        String url = String.format(Constant.PENDING_TASKS_URL,
                mPrefManager.getClientServerUrl(),
                mPrefManager.getCloudCode(), mPrefManager.getAuthToken());
        Log.e(TAG,"PENDING TASK URL = " +url);

        RequestQueue queue = Volley.newRequestQueue(getActivity());
        StringRequest request = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                       //Log.e(TAG, "callAPI Response=" + response);
                        try {
                            JSONArray jsonArray = new JSONArray(response);
                            pendingTaskList = new ArrayList<>(jsonArray.length());
                            for (int i = 0; i < jsonArray.length(); i++) {
                                JSONObject jobj = jsonArray.getJSONObject(i);
                                Task taskObj = new Gson().fromJson(jobj.toString(), Task.class);
                                pendingTaskList.add(taskObj);
                            }
                            setTaskCount(String.valueOf(pendingTaskList.size()));
                            callAdapter();
                            hideProgressDialog();
                        } catch (Exception e) {
                            callAdapter();
                            e.printStackTrace();
                            hideProgressDialog();
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                callAdapter();
               hideProgressDialog();
            }
        });

        request.setRetryPolicy(new DefaultRetryPolicy(Constant.TIME_OUT,
                5,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));

        queue.add(request);

    }

    private void showProgressDialog(){
        mWaiting = ProgressDialog.show(getActivity(), "",
                "Loading...", false);
    }

    private void hideProgressDialog(){
        if (mWaiting != null) {
            mWaiting.dismiss();
        }
    }

    @Override
    public void onDestroyView() {
        mAdapter = null;
        pendingTaskList = null;
        mPrefManager = null;
        super.onDestroyView();

    }
}
