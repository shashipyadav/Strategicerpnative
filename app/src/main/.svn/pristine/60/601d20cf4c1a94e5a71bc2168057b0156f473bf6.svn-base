package com.example.myapplication.database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseErrorHandler;
import android.database.SQLException;
import android.database.sqlite.SQLiteConstraintException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteStatement;
import android.provider.ContactsContract;
import android.util.Log;
import com.example.myapplication.user_interface.home.model.Product;
import com.example.myapplication.user_interface.home.model.ProductItem;
import com.example.myapplication.util.Constant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class DatabaseManager {

    private DatabaseHelper databaseHelper;
    private Context context;
    private SQLiteDatabase database;

    public DatabaseManager(Context c) {
        context = c;
    }

    public DatabaseManager open() throws SQLException {
        databaseHelper = new DatabaseHelper(context);
        database = databaseHelper.getWritableDatabase();
        return this;
    }

    public void close() {
        databaseHelper.close();
    }

    public void insertForm(int chartId, String formName,String formJson) {
        Log.e(getClass().getSimpleName(), "insert");
        SQLiteStatement stmt = database.compileStatement("INSERT INTO " + DatabaseHelper.TABLE_FORM + "(" + DatabaseHelper.COL_FORM_TABLE_ID + "," +DatabaseHelper.COL_FORM_NAME+","+ DatabaseHelper.COL_FORM_JSON + ")" + " VALUES (?,?,?)");
        stmt.bindLong(1, chartId);
        stmt.bindString(2, formName);
        stmt.bindString(3, formJson);

        long rowId = stmt.executeInsert();
        Log.e(getClass().getSimpleName(), "InsertedRow Id =" + rowId);
    }

    public void insertFormTime(int chartId, String time) {
        Log.e(getClass().getSimpleName(), "inserttime");
        SQLiteStatement stmt = database.compileStatement("INSERT INTO " + DatabaseHelper.TABLE_FORM_TIME + "(" + DatabaseHelper.COL_CHART_ID + "," + DatabaseHelper.COL_TIME + ")" + " VALUES (?,?)");
        stmt.bindLong(1, chartId);
        stmt.bindString(2, time);
        long rowId = stmt.executeInsert();
    }

    public void insertDListForm(int formId, String formJson) {
        Log.e(getClass().getSimpleName(), "insertDListForm");
        SQLiteStatement stmt = database.compileStatement("INSERT INTO " + DatabaseHelper.TABLE_DLIST + "(" + DatabaseHelper.COL_FORM_TABLE_ID + "," + DatabaseHelper.COL_FORM_JSON + ")" + " VALUES (?,?)");
        stmt.bindLong(1, formId);
        stmt.bindString(2, formJson);
        long rowId = stmt.executeInsert();
        System.out.println("InsertedRow Id =" + rowId);
    }

    public String getFormJson(int tableId) {
        String query = "";
        if(tableId != 0){
           query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_TABLE_ID + " = " + tableId;
        }else{
            //this is to get the appmenu
            query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_NAME + " = '" + Constant.APP_MENU + "'";
        }

        String formJSON = "";
        Cursor cursor = database.rawQuery(query, null);

        if (cursor != null) {
        if (cursor.moveToFirst()) {
            formJSON = cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_FORM_JSON));
        }
        }
        return formJSON;
    }

    public String fetchFormJson(String formName) {

        String formJSON = "";
        String query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_NAME + " = '" + formName.trim() + "'";
        Cursor cursor = database.rawQuery(query, null);

        if (cursor != null) {
            if (cursor.moveToFirst()) {
                formJSON = cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_FORM_JSON));
            }
        }
        return formJSON;
    }

    // DELETE Form
    public void deleteForm(int tableId) {
        Log.e(getClass().getSimpleName(), "deleteTable");
        try {
            database.execSQL("delete from " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_TABLE_ID + "=" + tableId);
        } catch (SQLiteConstraintException sqle) {
            String err = sqle.getMessage();
            Log.e("DBHelper", err);
        }
    }

    public boolean checkIfFormExists(int formId) {
        Log.e(getClass().getSimpleName(), "checkIfFormExists");
        String query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_TABLE_ID + " = " + formId;

        Cursor cursor = database.rawQuery(query, null);
        if (cursor.getCount() <= 0) {
            cursor.close();
            return false;
        }
        cursor.close();
        return true;
    }

    public boolean checkIfFormExists(String title){
        String query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM + " WHERE " + DatabaseHelper.COL_FORM_NAME + " = '" + title + "'";

        Cursor cursor = database.rawQuery(query, null);
        if (cursor.getCount() <= 0) {
            cursor.close();
            return false;
        }
        cursor.close();
        return true;
    }

    public boolean isFirstTimeLoadingForm(int chartId) {
        Log.e(getClass().getSimpleName(), "isFirstTimeLoadingForm");
        String query = "SELECT  * FROM " + DatabaseHelper.TABLE_FORM_TIME + " WHERE " + DatabaseHelper.COL_CHART_ID + " = " + chartId;
        Cursor cursor = database.rawQuery(query, null);
        if (cursor.getCount() <= 0) {
            cursor.close();
            return false;
        }
        return true;
    }
    /**
     * Update Form item by chartId
     *
     * @param chartId
     * @return
     */
    public boolean updateForm(int chartId,String formJson) {
        ContentValues values = new ContentValues();
        values.put(DatabaseHelper.COL_FORM_JSON, formJson);

        try {
            String[] args = new String[]{String.valueOf(chartId)};
            database.update(DatabaseHelper.TABLE_FORM, values, DatabaseHelper.COL_FORM_TABLE_ID + "=?", args);
            Log.e("updateForm()","form update sucess");
            return true;
        } catch (SQLiteException e) {
            Log.e("updateForm()","form update failed");
            return false;

        }
    }

    public void deleteMenuRecord(int chartId) {
        try {
            String[] args = new String[]{String.valueOf(chartId)};
            database.delete(DatabaseHelper.TABLE_FORM, DatabaseHelper.COL_FORM_TABLE_ID + "=?", args);

        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public boolean insertWishListProduct(ProductItem product) {

        Log.e(getClass().getSimpleName(), "insertWishListProduct");
        SQLiteStatement stmt = database.compileStatement("INSERT INTO " + DatabaseHelper.TABLE_WISHLIST + "(" + DatabaseHelper.COL_SIZE + "," + DatabaseHelper.COL_DESIGN + ","+ DatabaseHelper.COL_WIDTH + ","+DatabaseHelper.COL_HEIGHT +"," + DatabaseHelper.COL_LENGTH+","+ DatabaseHelper.COL_HS_CODE + ","+DatabaseHelper. COL_SKU_CODE + ","+ DatabaseHelper.COL_FT2_PER_BOX+ ","+ DatabaseHelper.COL_PCS_PER_BOX+","+ DatabaseHelper.COL_GROSS_WEIGHT +","+ DatabaseHelper.COL_SUR_CODE+ ","+ DatabaseHelper.COL_CAT_CODE + "," +DatabaseHelper.COL_VERTICAL_NAME +","+DatabaseHelper.COL_IMAGEURL + ","+ DatabaseHelper.COL_SKU_NAME+","+ DatabaseHelper.COL_ITEM_ID +"," +DatabaseHelper.COL_FULL_VIEW_IMAGE+")" + " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        stmt.bindString(1, product.getProductInfo().getSize());
        stmt.bindString(2, product.getProductInfo().getDesign());
        stmt.bindString(3, product.getProductInfo().getWidth());
        stmt.bindString(4, product.getProductInfo().getHeight());
        stmt.bindString(5, product.getProductInfo().getLength());
        stmt.bindString(6, product.getProductInfo().getHsCode());
        stmt.bindString(7, product.getProductInfo().getSkuCode());
        stmt.bindString(8, product.getProductInfo().getFt2PerBox());
        stmt.bindString(9, product.getProductInfo().getPiecePerBox());
        stmt.bindString(10, product.getProductInfo().getGrossWeight());
        stmt.bindString(11, product.getProductInfo().getSurfaceCode());
        stmt.bindString(12, product.getProductInfo().getCategoryCode());
        stmt.bindString(13, product.getProductInfo().getVerticalName());
        stmt.bindString(14, product.getProductInfo().getImageThumbnail());
        stmt.bindString(15, product.getProductInfo().getSkuName());
        stmt.bindString(16, product.getItemID());

        String imageFullVew = null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            imageFullVew = String.join(",", product.getProductInfo().getImageFullView());
        }else{
            String SEPARATOR = ",";
            StringBuilder stringBuilder = new StringBuilder();
            for(String image :  product.getProductInfo().getImageFullView()){
                stringBuilder.append(image);
                stringBuilder.append(SEPARATOR);
            }
            String imagesString = stringBuilder.toString();
            //Remove last comma
            imageFullVew = imagesString.substring(0, imagesString.length() - SEPARATOR.length());
        }
        stmt.bindString(17,imageFullVew );

        long rowId = stmt.executeInsert();
        System.out.println("InsertedRow Id =" + rowId);
        if(rowId == -1){
            return false;
        }else{
            return true;
        }
    }

    public List<ProductItem> getWishlistProducts() {
        List<ProductItem> wishlist = new ArrayList<>();
        try {
            // Select All Query
            String selectQuery = "SELECT  * FROM " + DatabaseHelper.TABLE_WISHLIST;
            Cursor cursor = database.rawQuery(selectQuery, null);

            // looping through all rows and adding to list
            if (cursor.moveToFirst()) {
                do {
                    Product productObj = new Product();
                    productObj.setSize(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_SIZE)));
                    productObj.setDesign(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_DESIGN)));
                    productObj.setWidth(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_WIDTH)));
                    productObj.setHeight(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_HEIGHT)));
                    productObj.setLength(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_LENGTH)));
                    productObj.setHsCode(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_HS_CODE)));
                    productObj.setSkuCode(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_SKU_CODE)));
                    productObj.setFt2PerBox(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_FT2_PER_BOX)));
                    productObj.setPiecePerBox(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_PCS_PER_BOX)));
                    productObj.setGrossWeight(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_GROSS_WEIGHT)));
                    productObj.setSurfaceCode(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_SUR_CODE)));
                    productObj.setCategoryCode(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_CAT_CODE)));
                    productObj.setVerticalName(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_VERTICAL_NAME)));
                    productObj.setImageThumbnail(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_IMAGEURL)));
                    productObj.setSkuName(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_SKU_NAME)));
                    productObj.setItemId(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_ITEM_ID)));

                    String fullViewImages = cursor.getString(cursor.getColumnIndex(DatabaseHelper.COL_FULL_VIEW_IMAGE));
                    String[] imgArr = fullViewImages.split(",");
                    List<String> imgList = Arrays.asList(imgArr);
                    productObj.setImageFullView(imgList);

                    ProductItem item = new ProductItem();
                    item.setItemID(productObj.getItemId());
                    item.setProductInfo(productObj);
                    wishlist.add(item);
                } while (cursor.moveToNext());
            }
            // close db connection
            // db.close();
        } catch (Exception e){
            e.printStackTrace();
        }

        // return notes list
        return wishlist;
    }

    public void removeAll(){
        try{
            database.delete(DatabaseHelper.TABLE_FORM, null, null);
            database.delete(DatabaseHelper.TABLE_WISHLIST,null,null);
        close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * Check if a product exists in wishlist table
     * @param itemID
     * @return
     */
    public boolean checkIfProductExists(String itemID) {
        Log.e(getClass().getSimpleName(), "checkIfProductExists");
        String query = "SELECT  * FROM " + DatabaseHelper.TABLE_WISHLIST + " WHERE " + DatabaseHelper.COL_ITEM_ID + " = '" + itemID + "'";

        Cursor cursor = database.rawQuery(query, null);
        if (cursor.getCount() <= 0) {
            cursor.close();

            return false;
        }
        cursor.close();

        return true;
    }

    /**
     * Delete a particular product from wishlist
     * @param itemID = product itemId
     * @return
     */
    public boolean deleteProductFromWishlist(String itemID)
    {
        return database.delete(DatabaseHelper.TABLE_WISHLIST, DatabaseHelper.COL_ITEM_ID + "=?", new String[]{itemID}) > 0;
    }
}
