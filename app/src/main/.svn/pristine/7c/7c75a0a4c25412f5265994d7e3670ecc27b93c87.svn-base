package com.example.myapplication.user_interface.home.controller;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.viewpager.widget.ViewPager;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.example.myapplication.BuildConfig;
import com.example.myapplication.R;
import com.example.myapplication.database.DatabaseManager;
import com.example.myapplication.user_interface.home.model.ProductItem;
import com.example.myapplication.user_interface.home.view.ProductDetailsImageSliderAdapter;
import com.example.myapplication.Constant;
import com.example.myapplication.util.ToastUtil;
import com.google.android.material.tabs.TabLayout;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ProductDetailsActivity extends AppCompatActivity implements View.OnClickListener {

    private static final String DEBUG_TAG = ProductDetailsActivity.class.getSimpleName();
    private String title = "";
    private String itemId = "";
    private List<String> mList = new ArrayList<>();
    private RelativeLayout rlWhatsapp ,rlWishList;
    private ViewPager viewPager;
    private ProductDetailsImageSliderAdapter adapter;
    private Button btnMoreDetails, btnWishList;
    private TextView txtBrochure, txtTechnicalDoc;
    private ProductItem product;
    private ProgressDialog mWaiting;
    private LinearLayout llMoreDetail;
    private DatabaseManager dbManager;
    private TabLayout tabLayout;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_product_details);

        Intent intent = getIntent();
        product = (ProductItem) intent.getSerializableExtra(Constant.EXTRA_OBJECT);

        initViews();
        setImages();

        Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);
        ImageView  imageBack = toolbar.findViewById(R.id.img_back);
        imageBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        ImageView imageWishList = toolbar.findViewById(R.id.img_wishlist);
        imageWishList.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(ProductDetailsActivity.this, WishlistActivity.class);
                startActivity(intent);
            }
        });
          setProductDetailsData();

        for(int n = 0; n < tabLayout.getTabCount(); n++){
            View tab = ((ViewGroup)tabLayout.getChildAt(0)).getChildAt(n);

               if(n == tabLayout.getTabCount()-1){
                   int lastIndex = mList.size()-1;
                   String imUrl = mList.get(lastIndex);
                  String extension= imUrl.substring(imUrl.lastIndexOf(".") + 1);
                  Log.e("EXTENSION", extension);

                   if(extension.toLowerCase().matches("jpg|png")){
                       tab.setBackground(getResources().getDrawable(R.drawable.tab_selector));
                   }else {
                       tab.setBackground(getResources().getDrawable(R.drawable.tab_selector_triangle));
                   }
               }else{
                   tab.setBackground(getResources().getDrawable(R.drawable.tab_selector));
               }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        setButtonWishlist();
    }

    private void initViews(){
        dbManager = new DatabaseManager(ProductDetailsActivity.this);
        dbManager.open();
        rlWhatsapp = findViewById(R.id.rl_whatsapp);
        rlWhatsapp.setOnClickListener(this);
        rlWishList = findViewById(R.id.rl_wishlist);
        btnWishList = findViewById(R.id.btn_wishList);
        setButtonWishlist();
        rlWishList.setOnClickListener(this);
        btnMoreDetails = findViewById(R.id.btn_more);
        btnMoreDetails.setOnClickListener(this);
        txtBrochure = findViewById(R.id.txt_doc_brochure);
        txtBrochure.setOnClickListener(this);
        txtTechnicalDoc = findViewById(R.id.txt_tech_doc);
        txtTechnicalDoc.setOnClickListener(this);
        llMoreDetail = findViewById(R.id.more_layout);
    }

    private void setButtonWishlist(){
        if(dbManager.checkIfProductExists(product.getItemID())){
            btnWishList.setText(R.string.saved_to_wishlist);
            btnWishList.setCompoundDrawablesWithIntrinsicBounds( ContextCompat.getDrawable(this,R.drawable.ic_wishlist_red), null,null, null);
        }else{
            btnWishList.setText(R.string.add_to_wishlist);
            btnWishList.setCompoundDrawablesWithIntrinsicBounds( ContextCompat.getDrawable(this,R.drawable.ic_wishlist_black), null,null, null);
        }
    }


    private void setImages(){
        if(product.getProductInfo() != null){
            mList = product.getProductInfo().getImageFullView();
        }
        viewPager = findViewById(R.id.viewpager);
        adapter = new ProductDetailsImageSliderAdapter( ProductDetailsActivity.this, mList);
        viewPager.setAdapter(adapter);

        tabLayout = findViewById(R.id.tab_layout);
        tabLayout.setupWithViewPager(viewPager, true);

    }

    @Override
    public boolean onOptionsItemSelected(@NonNull  MenuItem item) {
        if(item.getItemId() == android.R.id.home){
            onBackPressed();
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onClick(View v) {
        if(v == rlWhatsapp){
            Bitmap bitmap = takeScreenshot();
            saveBitmap(bitmap);
            shareIt();
        }
        if(v == btnMoreDetails){
            if(btnMoreDetails.getText().toString().toLowerCase().contains("more")){

                btnMoreDetails.setCompoundDrawablesWithIntrinsicBounds(null, null, ContextCompat.getDrawable(this,R.drawable.ic_arrow_up), null);

                btnMoreDetails.setText("Less details");
                llMoreDetail.setVisibility(View.VISIBLE);
            }else{
                btnMoreDetails.setText("Click for more details");
                btnMoreDetails.setCompoundDrawablesWithIntrinsicBounds(null, null, ContextCompat.getDrawable(this,R.drawable.ic_arrow_down), null);
                llMoreDetail.setVisibility(View.GONE);
            }
        }

        if(v == txtBrochure){
            if(!product.getProductInfo().getDocumentBrochure().isEmpty()){
                Intent intent = new Intent(ProductDetailsActivity.this, PdfViewActivity.class);
                intent.putExtra(Constant.EXTRA_URL, product.getProductInfo().getDocumentBrochure());
                intent.putExtra(Constant.EXTRA_TITLE, getResources().getString(R.string.doc_brochure));
                startActivity(intent);
            }else{
                ToastUtil.showToastMessage("Document Brochure Not Available",this);
            }
        }

        if(v == txtTechnicalDoc){
            if(!product.getProductInfo().getTechnicalDocument().isEmpty()) {
                Intent intent = new Intent(ProductDetailsActivity.this, PdfViewActivity.class);
                intent.putExtra(Constant.EXTRA_URL, product.getProductInfo().getTechnicalDocument());
                intent.putExtra(Constant.EXTRA_TITLE, getResources().getString(R.string.doc_technical));
                startActivity(intent);
            }else{
                ToastUtil.showToastMessage("Technical Document Not Available",this);
            }
        }

        if(v == rlWishList){
            if(!dbManager.checkIfProductExists(product.getItemID())){
                if(dbManager.insertWishListProduct(product)){
                    ToastUtil.showToastMessage("Added to Wishlist", ProductDetailsActivity.this);
                }else{
                    ToastUtil.showToastMessage("Error while adding to Wishlist!", ProductDetailsActivity.this);
                }
            }else{
                dbManager.deleteProductFromWishlist(product.getItemID());
                ToastUtil.showToastMessage("Removed from Wishlist", ProductDetailsActivity.this);
            }
            setButtonWishlist();
        }
    }

    private Bitmap takeScreenshot() {
        Bitmap bitmap = null;
        try {
            if (viewPager != null) {
                bitmap = Bitmap.createBitmap(adapter.currentImageView.getWidth(),
                        adapter.currentImageView.getHeight(), Bitmap.Config.ARGB_8888);
                Canvas b = new Canvas(bitmap);
                adapter.currentImageView.draw(b);
            }
        }catch (Exception e ){
            e.printStackTrace();
        }
        return bitmap;
    }

    private void saveBitmap(Bitmap bitmap){
        if(bitmap !=null) {
            try {
                File cachePath = new File(getCacheDir(), "images");
                cachePath.mkdirs(); // don't forget to make the directory
                FileOutputStream stream = new FileOutputStream(cachePath + "/image.png"); // overwrites this image every time
                bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                stream.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void shareIt(){

        File imagePath = new File(getCacheDir(), "images");
        File newFile = new File(imagePath, "image.png");
        Uri contentUri = FileProvider.getUriForFile(this, BuildConfig.APPLICATION_ID + ".provider", newFile);

        Log.e("CONTENT URI",String.valueOf(contentUri));
        if (contentUri != null) {
            Intent shareIntent = new Intent();
            shareIntent.setAction(Intent.ACTION_SEND);
            shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); // temp permission for receiving app to read this file
            shareIntent.setDataAndType(contentUri, getContentResolver().getType(contentUri));
            shareIntent.putExtra(Intent.EXTRA_STREAM, contentUri);

            if(product.getProductInfo() != null){
                shareIntent.putExtra(Intent.EXTRA_TEXT,product.getProductInfo().getItemCode() +"\n"+ product.getProductInfo().getItemDesc()+"\n\n"+
                        "Please click on the link for more details \n" +
                        "https://www.simpolo.net/");
                startActivity(Intent.createChooser(shareIntent, getResources().getString(R.string.share_product)));
            }else{
                ToastUtil.showToastMessage("Product Not Available",this);
            }
        }
    }

    private void setProductDetailsData(){
        if(product.getProductInfo() != null){

            TextView txtTitle = findViewById(R.id.title);
            txtTitle.setText(product.getItemID());

            TextView txtSize = findViewById(R.id.txt_size);
            txtSize.setText(product.getProductInfo().getSize());

            TextView txtDesign = findViewById(R.id.txt_design);
            txtDesign.setText(product.getProductInfo().getDesign());

            TextView txtWidth = findViewById(R.id.txt_width);
            txtWidth.setText(product.getProductInfo().getWidth());

            TextView txtHeight = findViewById(R.id.txt_height);
            txtHeight.setText(product.getProductInfo().getHeight());

            TextView txtLength = findViewById(R.id.txt_length);
            txtLength.setText(product.getProductInfo().getLength());

            TextView txtItemCode = findViewById(R.id.txt_item_code);
            txtItemCode.setText(product.getProductInfo().getItemCode());

//            TextView txtHsCode = findViewById(R.id.txt_hs_code);
//            txtHsCode.setText(product.getProductInfo().getHsCode());

            TextView txtItemCategory = findViewById(R.id.txt_item_cat);
            txtItemCategory.setText(product.getProductInfo().getItemCategory());

            TextView txtItemGroup = findViewById(R.id.txt_item_grp);
            txtItemGroup.setText(product.getProductInfo().getItemGroup());

            TextView txtMatType = findViewById(R.id.txt_mat_type);
            txtMatType.setText(product.getProductInfo().getMaterialType());

            TextView txtAbcCode = findViewById(R.id.txt_abc_code);
            txtAbcCode.setText(product.getProductInfo().getAbcCode());

//            TextView txtSkuCode = findViewById(R.id.txt_sku_code);
//            txtSkuCode.setText(product.getProductInfo().getSkuCode());

            TextView txtPriUnit = findViewById(R.id.txt_pri_unit);
            txtPriUnit.setText(product.getProductInfo().getPriUnit());

//            TextView txtM2PerBox = findViewById(R.id.txt_m2_per_box);
//            txtM2PerBox.setText(product.getProductInfo().getM2PerBox());

//            TextView txtMarItemCode = findViewById(R.id.txt_mar_item_code);
//            txtMarItemCode.setText(product.getProductInfo().getMaterialItemCode());

            TextView txtDesignCode = findViewById(R.id.txt_design_code);
            txtDesignCode.setText(product.getProductInfo().getDesignCode());

            TextView txtFT2PerBox = findViewById(R.id.txt_ft2_per_box);
            txtFT2PerBox.setText(product.getProductInfo().getFt2PerBox());

            TextView txtLaunchYear = findViewById(R.id.txt_launch_year);
            txtLaunchYear.setText(product.getProductInfo().getLaunchYear());

            TextView txtPcsPerBox = findViewById(R.id.txt_pcs_per_box);
            txtPcsPerBox.setText(product.getProductInfo().getPiecePerBox());

            TextView txtGrossWeight = findViewById(R.id.txt_gross_weight);
            txtGrossWeight.setText(product.getProductInfo().getGrossWeight());

            TextView txtSubCat = findViewById(R.id.txt_sub_cat);
            txtSubCat.setText(product.getProductInfo().getSubCategory());

            TextView txtSurfaceCode = findViewById(R.id.txt_surface_code);
            txtSurfaceCode.setText(product.getProductInfo().getSurfaceCode());

            TextView txtCatCode = findViewById(R.id.txt_cat_code);
            txtCatCode.setText(product.getProductInfo().getCategoryCode());

            TextView txtSupCode= findViewById(R.id.txt_sup_code);
            txtSupCode.setText(product.getProductInfo().getSupplierCode());

            TextView txtVerticalCode= findViewById(R.id.txt_vertical_code);
            txtVerticalCode.setText(product.getProductInfo().getVerticalCode());

            TextView txtVerticalName= findViewById(R.id.txt_vertical_name);
            txtVerticalName.setText(product.getProductInfo().getVerticalName());

            TextView txtWareHouseCode= findViewById(R.id.txt_warehouse_code);
            txtWareHouseCode.setText(product.getProductInfo().getWareHouseCode());

            TextView txtBillingUOMCode= findViewById(R.id.txt_billing_uom_code);
            txtBillingUOMCode.setText(product.getProductInfo().getBillingUomCode());

            TextView txtStorageUOMCode= findViewById(R.id.txt_storage_uom_code);
            txtStorageUOMCode.setText(product.getProductInfo().getStorageUomCode());

            TextView txtOrdUOMCode= findViewById(R.id.txt_ord_uom_code);
            txtOrdUOMCode.setText(product.getProductInfo().getOrderingUomCode());
        }
    }

    private void showProgressDialog() {
        mWaiting = ProgressDialog.show(this, "",
                "Loading...", false);
    }

    private void hideProgressDialog() {
        if (mWaiting != null) {
            mWaiting.dismiss();
        }
    }

}
