package com.example.myapplication.user_interface.forms.controller;

import android.app.Activity;
import android.app.ProgressDialog;
import android.util.Log;
import com.example.myapplication.dlist.DList;
import com.example.myapplication.dlist.DListItem;
import com.example.myapplication.helper.SharedPrefManager;
import com.example.myapplication.user_interface.forms.helper.DynamicButtonHelper;
import com.example.myapplication.user_interface.forms.model.Field;
import com.example.myapplication.util.ExtensionUtil;
import com.example.myapplication.util.MultipartUtility;
import com.example.myapplication.util.ToastUtil;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.mozilla.javascript.TopLevel.Builtins.Array;

public class SaveRecordHelper {
    private static final String DEBUG_TAG = SaveRecordHelper.class.getSimpleName();
    private Activity activitiy;
    private ProgressDialog mWaiting;
    private String formSave;
    private String recordId;
    private String formId;
    private SharedPrefManager prefManager;
    private ResponseInterface listener;
    private boolean mChangeState;
    private String nextState;
    private boolean editRecord = false;
    private boolean isCallFunction = true;
    private String buttonTitle;
    private String formTitle;

    public SaveRecordHelper(Activity activity,ResponseInterface listener){
        this.activitiy = activity;
        this.listener = listener;
        prefManager = new SharedPrefManager(activity);
    }

    public void setFlag(boolean callFunction){
        isCallFunction = callFunction;
    }

    private boolean getFlag(){
        return isCallFunction;
    }

    //  needs formId and formSave for the api to be called successfully
    public void callSaveFormRecordAPI() {
        showDialog();
        String formSave = getFormSave();
        String[] jarr = formSave.split("saveeditpart");
        String[] arr = jarr[1].replaceAll("['\\(\\)]", "").split(",");
        String formid = arr[0];
        setFormId(formid);
        String editids = arr[1];
        String msg = arr[2];

        String URL = prefManager.getClientServerUrl() + "/SaveFormField.do?actn=SaveData&mobileform=yes&" +
                "id=" + formid + "&editids=" + editids + "&" +
                "valuestring=null&globalvar=0&cloudcode=" + prefManager.getCloudCode() + "&token=" + prefManager.getAuthToken();

        Log.e("CALLSAVEDLIST API url ", URL);
        final String charset = "UTF-8";

        try {
            MultipartUtility multipart = new MultipartUtility(URL, charset);
            //additional info like mandatory and such
            for (int j = 0; j < FormFragment.additionalFieldDataList.size(); j++) {
                Field fieldobj = FormFragment.additionalFieldDataList.get(j);
                if (!fieldobj.getId().matches("loadonchangeids|menudivresults|menudivform|dlistspanids|checkhideshowids|stateids|formsavechecknames|formsavecheck")) {
                    if (fieldobj.getId().toLowerCase().equals("mandatorynames")) {
                        fieldobj.setValue("");
                    }

                    if(isEditRecord()){
                        if((fieldobj.getId().toLowerCase().equals("idselected")) ||
                                fieldobj.getId().toLowerCase().equals("idhidden") ||
                                fieldobj.getId().toLowerCase().equals("fieldid")){

                            if(isEditRecord()){
                                fieldobj.setValue(getRecordId());
                            }
                        }
                    }
                    multipart.addFormField(fieldobj.getId(), fieldobj.getValue());
                    Log.e("", fieldobj.getId() + ":" + fieldobj.getValue());
                }
            }
            multipart.addFormField("showformid", "");
            multipart.addFormField("api", "REST");
            Log.e("", "showformid" + ":" + "");

            //main form fields
            for (int i = 0; i < FormFragment.fieldsList.size(); i++) {
                Field fieldobj = FormFragment.fieldsList.get(i);
                //we dont want to send the dlist item field id in the main form
                if (fieldobj.getdListArray().isEmpty()) {
                    if(fieldobj.getDataType().equalsIgnoreCase("file")){
                        if(!fieldobj.getValue().equals("")  || !fieldobj.getValue().equals("0")){
                            String ext = ExtensionUtil.getExtension(fieldobj.getValue());
                            if (!ext.isEmpty()){
                                File file = new File(fieldobj.getValue());

                                if(file.exists()) {
                                    multipart.addFilePart(fieldobj.getId(),file);
                                }
                            }
                        }
                    }else if (fieldobj.getDataType().toLowerCase().matches("checkbox|boolean")){

                        String value = fieldobj.getValue().equals("true") ? "on" : "off";
                        multipart.addFormField(fieldobj.getId(), value);

                    }else{
                        multipart.addFormField(fieldobj.getId(), fieldobj.getValue());
                    }
                    Log.e("", fieldobj.getId() + ":" + fieldobj.getValue());
                }
            }

            if (FormFragment.dlistArrayPosition != -1) {
                //Dlist
                Field fobj = FormFragment.fieldsList.get(FormFragment.dlistArrayPosition);
                if (!fobj.getdListArray().isEmpty()) {
                    List<Field> dlistArray = fobj.getdListArray();
                    for (int j = 0; j < dlistArray.size(); j++) { // will loop through the dlistbuttonArray

                        Field dlist = dlistArray.get(j); // sindle dlist Item
                        String dlistfieldid = dlist.getId().replace("field", "fieldid");
                        List<DList> dlistFields = dlist.getdListsFields();
                        String contentRows = "";
                        String noOfRows = "";

                        //loop through dlist titles - zeroth row
                        for (int k = 0; k < dlistFields.size(); k++) {
                            DList dobj = dlistFields.get(k);

                            if (k == 0) {
                                multipart.addFormField(dlistfieldid + "_0", "0");
                                Log.e("", dlistfieldid + "_0" + ":" + "0");
                            }

                            if (dobj.getId().contains("contentrows")) {
                                contentRows = dobj.getId();
                            }
                            if (dobj.getId().contains("noofrows")) {
                                noOfRows = dobj.getId();
                            }
                            if (!dobj.getId().matches("(contentrows([0-9]{5,}))|(noofrows([0-9]{5,}))|searchids36906|stateids36906|scrollwidth36906|islonglist36906")) {

                                multipart.addFormField(dobj.getId(), dobj.getValue());
                                Log.e("", dobj.getId() + ":" + dobj.getValue());
                            }
                        }

                        //loop through dlistfieldvalues
                        List<DListItem> dlistFieldValues = dlist.getDListItemList(); // get the dlistFieldValues Array
                        String listids = ",";

                        for (int m = 0; m < dlistFieldValues.size(); m++) { // looping through dlist rows
                            int index = m + 1;
                            List<DList> dlistRow = dlistFieldValues.get(m).getDlistArray();
                          //  multipart.addFormField(dlistfieldid + "_" + index, "0");
//                            Log.e("FIELDID", dlistfieldid + "_" + index + ":" + "0");

                            for (int w = 0; w < dlistRow.size(); w++) {
                                DList dobj = dlistRow.get(w);
                                String regex = "(contentrows([0-9]{5,})(_[0-9]))|(deletedrows([0-9]{5,})(_[0-9]))|(noofrows([0-9]{5,})(_[0-9]))|(searchids([0-9]{5,})(_[0-9]))|(stateids([0-9]{5,})(_[0-9]))|(scrollwidth([0-9]{5,})(_[0-9]))|(islonglist([0-9]{5,})(_[0-9]))";
                                String regex1 = "(contentrows([0-9]{5,}))|(deletedrows([0-9]{5,}))|(noofrows([0-9]{5,}))|(searchids([0-9]{5,}))|(stateids([0-9]{5,}))|(scrollwidth([0-9]{5,}))|(islonglist([0-9]{5,}))";
                                if (!dobj.getId().matches(regex)) {
                                    if (!dobj.getId().matches(regex1)) {
                                    if(dobj.getFieldType().equalsIgnoreCase("file")){
                                        if(!dobj.getValue().equals("")){
                                            if (!dobj.getValue().equals("0")){
                                                File file = new File(dobj.getValue());
                                                if(file.exists()){
                                                    multipart.addFilePart(dobj.getId(),file);
                                                }
                                            }
                                        }
                                    }else if (dobj.getFieldType().toLowerCase().matches("checkbox|boolean")) {
                                        String value = dobj.getValue().equals("true") ? "on" : "off";
                                        multipart.addFormField(dobj.getId(),value);
                                        Log.e("", dobj.getId() + ":" + value);
                                    }else{
                                        multipart.addFormField(dobj.getId(), dobj.getValue());
                                        Log.e("", dobj.getId() + ":" + dobj.getValue());
                                    }
                                  //  multipart.addFormField(dobj.getId(), dobj.getValue());

                                }
                                }
                            }
                            listids += "" + index + ","; // contentrows
                        }
                        multipart.addFormField(contentRows, listids);
                        multipart.addFormField(noOfRows, String.valueOf(dlistFieldValues.size()));
                        Log.e("", contentRows + ":" + listids);
                        Log.e("", noOfRows + ":" + String.valueOf(dlistFieldValues.size()));
                    }
                }
            }
            multipart.addFormField("rows", "50");

            Log.e("", "rows" + ":" + "50");

            List<String> response = multipart.finish();
            Log.e("SERVER REPLIED: ", Arrays.asList(response).toString());
            final String result = response.toString();

            Log.e("RESPONSE", "saveEditPart" + result);
            Pattern p = Pattern.compile("\\d+");
            Matcher m = p.matcher(result);
            if (m.find()) {
                System.out.println(m.group(0));
                setRecordId(m.group(0));
            }

            activitiy.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    ToastUtil.showToastMessage(result, activitiy);
                    dismissDialog();
                    if(changeState()){
                        DynamicButtonHelper dynamicButtonHelper = new DynamicButtonHelper(activitiy, listener);
                        dynamicButtonHelper.setFormId(getFormId());
                        dynamicButtonHelper.setRecordId(getRecordId());
                        dynamicButtonHelper.setButtonTitle(getButtonTitle());
                        dynamicButtonHelper.setInputInTagField(false);
                        dynamicButtonHelper.setFormTitle(formTitle);
                        dynamicButtonHelper.callActionAPI(getNextState());
                    }else{
                        if(listener != null){

                            listener.onSuccessResponse(getRecordId(),false);

                            //previous
                           // listener.onChangeState(getRecordId());
                        }
                    }
                }
            });

//            if(!changeState()){
//                if(listener != null){
//                    listener.onSuccessResponse(getRecordId(),changeState(),false);
//                }
//            }
        } catch (IOException ex) {
            System.err.println(ex);
            dismissDialog();
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void showDialog(){
        activitiy.runOnUiThread(new Runnable() {
            public void run() {
                mWaiting = ProgressDialog.show(activitiy, "",
                        "Saving Details ...", false);
            }
        });
    }

    private void dismissDialog() {
        activitiy.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mWaiting != null) {
                    mWaiting.dismiss();
                }
            }
        });
    }

    public void setFormId(String formId){
        this.formId = formId;
    }

    private String getFormId(){
        return formId;
    }

    public void setFormSave(String formSave){
        this.formSave = formSave;
    }

    private String getFormSave(){
        return formSave;
    }

    public void setRecordId(String recordId) {
        this.recordId = recordId;
        Log.e(DEBUG_TAG,"saved Record Id = " + this.recordId);
    }

    public String getRecordId(){
        if(recordId == null){
            return "0";
        }else{
            return recordId;
        }
    }

    public boolean changeState() {
        return mChangeState;
    }

    public void setChangeState(boolean changeState) {
        this.mChangeState = changeState;
    }

    public String getNextState() {
        return nextState;
    }

    public void setNextState(String nextState) {
        this.nextState = nextState;
    }

    public boolean isEditRecord() {
        return editRecord;
    }

    public void setEditRecord(boolean editRecord) {
        this.editRecord = editRecord;
    }

    public void setButtonTitle(String value){
        buttonTitle = value;
    }

    private String getButtonTitle(){
        return buttonTitle;
    }

    public String getFormTitle() {
        return formTitle;
    }

    public void setFormTitle(String formTitle) {
        this.formTitle = formTitle;
    }
}
