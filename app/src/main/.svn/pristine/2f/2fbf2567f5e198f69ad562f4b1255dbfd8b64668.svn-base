package com.example.myapplication.activities;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.example.myapplication.R;
import com.example.myapplication.util.Constant;
import com.example.myapplication.helper.SharedPrefManager;
import com.example.myapplication.util.DialogUtil;
import com.example.myapplication.util.KeyboardUtil;
import com.example.myapplication.util.NetworkUtil;
import com.example.myapplication.util.ToastUtil;
import com.example.myapplication.util.ValidateUtil;
import com.example.myapplication.util.VolleyErrorUtil;
import org.json.JSONArray;
import org.json.JSONObject;

public class LoginActivity extends AppCompatActivity {

    private final String DEBUG_TAG = LoginActivity.class.getSimpleName();
    private SharedPrefManager prefManager;
    private EditText etMobile;
    private ProgressDialog mWaiting;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        try {
            initEditText();
            initButton();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void initEditText() {
        etMobile = findViewById(R.id.et_mobile);
        etMobile.addTextChangedListener(textWatcher);
    }

    public void initButton() {
        Button submit = findViewById(R.id.btn_submit);
        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (validatedInputFields()) {
                    callGetServerListAPI();
                }
            }
        });
    }

    public boolean validatedInputFields() {
        if (ValidateUtil.isEmpty(etMobile)) {
            ToastUtil.showToastMessage("Please enter Mobile Number",
                    this);
            return false;
        }
        if (etMobile.getText().toString().length() < 10 || etMobile.getText().toString().length() > 10) {
            ToastUtil.showToastMessage("Enter a valid Mobile Number", LoginActivity.this);
            return false;
        }
        return true;
    }

    private void callGetServerListAPI() {
        if (NetworkUtil.isNetworkOnline(LoginActivity.this)) {
            getServerListAPI();
        } else {
            DialogUtil.showAlertDialog(this,
                    getResources().getString(R.string.no_internet_title),
                    getResources().getString(R.string.no_internet_message),
                    false,
                    false);
        }
    }

    private void getServerListAPI() {
        prefManager = new SharedPrefManager(LoginActivity.this);
        mWaiting = ProgressDialog.show(LoginActivity.this, "", getResources().getString(R.string.loading_message), false);
        String URL = String.format(Constant.URL_SERVER_LIST, etMobile.getText().toString());

        RequestQueue queue = Volley.newRequestQueue(LoginActivity.this);
        StringRequest request = new StringRequest(Request.Method.GET, URL,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        Log.e(DEBUG_TAG, "callAPI Response=" + response);
                        try {
                            JSONArray jsonArray = new JSONArray(response);
                            for (int i = 0; i < jsonArray.length(); i++) {
                                JSONObject jsonObject = jsonArray.getJSONObject(i);
                                String clientServerUrl = jsonObject.getString("Client_Server_URL");
                                String cloudCode = jsonObject.getString("Client_Server_Cloud_Code");
                                String mobileClientName = jsonObject.getString("Mobile_Client_Name");

                                // 16 server
//                                if (mobileClientName.equals("FMS (16 Server)")) {
//                                    prefManager.setServerDetails(clientServerUrl, cloudCode);
//                                    callGetOtpApi();
//                                }
                                //  7 server
                                if (mobileClientName.equals("simpoloceramics")) {
                                    prefManager.setServerDetails(clientServerUrl, cloudCode);
                                    callGetOtpApi();
                                }
                            }
                            if (response.isEmpty()) {
                                ToastUtil.showToastMessage(getResources().getString(R.string.mobile_not_found), LoginActivity.this);
                            }
                            mWaiting.dismiss();
                        } catch (Exception e) {
                            e.printStackTrace();
                            if (mWaiting != null) {
                                mWaiting.dismiss();
                            }
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                if (mWaiting != null) {
                    mWaiting.dismiss();
                }
            }
        });
        request.setRetryPolicy(new DefaultRetryPolicy(
                3000,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(request);
    }

    private void callGetOtpApi() {
        String URL = String.format(Constant.URL_GET_OTP, prefManager.getClientServerUrl(),
                etMobile.getText().toString(), prefManager.getCloudCode());
        RequestQueue queue = Volley.newRequestQueue(LoginActivity.this);
        Log.e("callGetOtpApi url", URL);
        StringRequest request = new StringRequest(Request.Method.GET, URL,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        Log.e(DEBUG_TAG, "callGetOtpApi Response=" + response);
                        try {
                            if (response.contains("OTP sent by SMS to") || response.contains("OTP for this demo account is")) {
                                if (response.contains("OTP sent by SMS to")) {
                                    ToastUtil.showToastMessage(response, LoginActivity.this);
                                }
                                Intent intent = new Intent(LoginActivity.this, ValidateOtpActivity.class);
                                intent.putExtra(Constant.EXTRA_MOBILE, etMobile.getText().toString());
                                startActivity(intent);
                            } else {
                                ToastUtil.showToastMessage(response, LoginActivity.this);
                            }
                            mWaiting.dismiss();
                        } catch (Exception e) {
                            e.printStackTrace();
                            if (mWaiting != null) {
                                mWaiting.dismiss();
                            }
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                VolleyErrorUtil.showVolleyError(LoginActivity.this, error);
                if (mWaiting != null) {
                    mWaiting.dismiss();
                }
            }
        });
        request.setRetryPolicy(new DefaultRetryPolicy(
                3000,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(request);
    }

    private TextWatcher textWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            int size = 10;
            if (etMobile.getText().toString().length() == size) {
                KeyboardUtil.hideKeyboard(LoginActivity.this);
            }
        }

        @Override
        public void afterTextChanged(Editable s) {
        }
    };
}
